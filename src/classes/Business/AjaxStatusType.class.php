<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2010-11-25 20:32:06                           *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class AjaxStatusType extends Enumeration implements IArrayable
	{
		// implement me!

		const SUCCESS					= 1;

		const FAILED					= 2;
		
		const FORBIDDEN					= 3;
		
		const UNAUTHORIZED				= 4;
		
		const NOT_FOUND					= 5;
		
		const PAYMENT_REQUIRED			= 6;
		
		const NOT_ACCEPTABLE			= 7;

		const BAD_REQUEST				= 8;

		/*
		 *  Внутренний код => код ответа (желательно по спецификации HTTP-кодов-состояния)
		 *  см. http://tools.ietf.org/html/rfc2068#section-6.1.1
		 */
		protected $names = array(
			self::SUCCESS 			=> HttpStatus::CODE_200,

			/*
			 *  Other statuses
			 */

			self::FAILED			=> HttpStatus::CODE_500,
			
			self::FORBIDDEN			=> HttpStatus::CODE_403,
			
			self::UNAUTHORIZED		=> HttpStatus::CODE_401,
			
			self::NOT_FOUND			=> HttpStatus::CODE_404,
			
			self::PAYMENT_REQUIRED	=> HttpStatus::CODE_402,
			
			self::NOT_ACCEPTABLE	=> HttpStatus::CODE_406,
			self::BAD_REQUEST		=> HttpStatus::CODE_400,
		);

		/**
		 * @param integer $id
		 * @return AjaxStatusType
		 */
		public static function wrap($id)
		{
			return new self($id);
		}

		/**
		 * @return AjaxStatusType
		 */
		public static function success()
		{
			return new self(self::SUCCESS);
		}

		/**
		 * @return AjaxStatusType
		 */
		public static function failed()
		{
			return new self(self::FAILED);
		}
		
		/**
		 * @return AjaxStatusType
		 */
		public static function forbidden()
		{
			return new self(self::FORBIDDEN);
		}
		
		/**
		 * @return AjaxStatusType
		 */
		public static function unauthrized()
		{
			return new self(self::UNAUTHORIZED);
		}
		
		/**
		 * @return AjaxStatusType
		 */
		public static function notFound()
		{
			return new self(self::NOT_FOUND);
		}
		
		/**
		 * @return AjaxStatusType
		 */
		public static function notAcceptable()
		{
			return new self(self::NOT_ACCEPTABLE);
		}
		
		/**
		 * @return AjaxStatusType
		 */
		public static function badRequest()
		{
			return new self(self::BAD_REQUEST);
		}

		/**
		 * @return AjaxStatusType
		 */
		public static function paymentRequired()
		{
			return new self(self::PAYMENT_REQUIRED);
		}

                public function toArray() {
                    return array('code'=>$this->getName());
                }
	}
?>
