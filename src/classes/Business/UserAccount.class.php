<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2012-03-15 15:44:39                           *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

class UserAccount extends AutoUserAccount implements Prototyped, DAOConnected, IArrayable
{
    /**
     * @var Float
     */
    private $oldBalance = null;
    /**
        * @return UserAccount
    **/
    public static function create()
    {
            return new self;
    }

    /**
        * @return UserAccountDAO
    **/
    public static function dao()
    {
            return Singleton::getInstance('UserAccountDAO');
    }

    /**
        * @return ProtoUserAccount
    **/
    public static function proto()
    {
            return Singleton::getInstance('ProtoUserAccount');
    }

    /**
        * @deprecated
        * @return Boolean 
        */
    public function isActive(){
        return 
            (Date::compare(Date::makeToday(), $this->getFreeUntilDate()) <= 0)
            || $this->getBalance()>=0
        ;
    }

    /**
        * Get account's owner User
        * @return User
        * @throws ObjectNotFoundException 
        */
    public function getOwner(){
        $user = Criteria::create(User::dao())
                ->add(Expression::eq('account.id', $this->getId()))
                ->setLimit(1)
                ->getList();
        $user = reset($user);
        if (!$user){
            throw new ObjectNotFoundException('no owner for account '.$this->getId());
        }
        return $user;
    }

    /**
        * Overrides setter and remembers old value
        * @param Float $balance
        * @return UserAccount 
        */
    public function setBalance($balance) {
        if (is_null($this->oldBalance))
            $this->oldBalance = $this->getBalance();
        return parent::setBalance($balance);
    }

    /**
     * Returns the difference between old and actual values
     * Needed to know if the object has been changed
     * @return Float
     */
    public function getBalanceDiff(){
        if (is_null($this->oldBalance))
            return 0;
        return  $this->getBalance() - $this->oldBalance;
    }

    /**
        * Decreases user's account by issue's cost.
        * No charging if the issue's actor equals the account's owner
        * @param BaseIssue $issue
        * @return \UserAccount
        * @throws NotEnoughMoney 
        */
    public function charge(BaseIssue $issue){
        if ($issue->getCost()<=0) return;
        $user = $this->getOwner();
        if ($issue->getUserId() == $user->getId()) return $this;
        $cost = $issue->getCost();
        if ($this->getBonus()>0){
            $this->setBonus($this->getBonus()-$cost);
            $cost = 0;
            if ($this->getBonus()<0){
                $cost = -$this->getBonus();
                $this->setBonus(0);
            }
        }
        if ($this->getBonus() + $this->getBalance() < 0) throw new NotEnoughMoney;
            $this->setBalance($this->getBalance() - $cost);
        /**
        * @todo Make Account Issue create & update for today
        */
        UserAccountIssue::dao()->charge($issue, $this);
        return $this;
    }

    // decorate object to array

    public function toArray() {
        return
                array(
                    'id'=>$this->getId(),
                    'freeUntilDate'=>$this->getFreeUntilDate()->toString(),
                    'balance'=>$this->getBalance(),
                    'bonus'=>$this->getBonus(),
                    'isFree'=> (Date::compare(Date::makeToday(), $this->getFreeUntilDate()) <= 0)
                );
    }
}
?>