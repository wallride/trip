<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2014-09-26 13:10:55                           *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoProject extends BaseTaskModel
	{
		protected $name = null;
		protected $description = null;
		protected $companyExecutor = null;
		protected $companyExecutorId = null;
		protected $companyClient = null;
		protected $companyClientId = null;
		protected $requirements = null;
		
		public function __sleep()
		{
			return array_merge(
				parent::__sleep(),
				array('id', 'name', 'description', 'companyExecutorId', 'companyClientId')
			);
		}
		
		public function getName()
		{
			return $this->name;
		}
		
		/**
		 * @return Project
		**/
		public function setName($name)
		{
			$this->name = $name;
			
			return $this;
		}
		
		public function getDescription()
		{
			return $this->description;
		}
		
		/**
		 * @return Project
		**/
		public function setDescription($description)
		{
			$this->description = $description;
			
			return $this;
		}
		
		/**
		 * @return Company
		**/
		public function getCompanyExecutor()
		{
			if (!$this->companyExecutor && $this->companyExecutorId) {
				$this->companyExecutor = Company::dao()->getById($this->companyExecutorId);
			}
			
			return $this->companyExecutor;
		}
		
		public function getCompanyExecutorId()
		{
			return $this->companyExecutorId;
		}
		
		/**
		 * @return Project
		**/
		public function setCompanyExecutor(Company $companyExecutor)
		{
			$this->companyExecutor = $companyExecutor;
			$this->companyExecutorId = $companyExecutor->getId();
			
			return $this;
		}
		
		/**
		 * @return Project
		**/
		public function setCompanyExecutorId($id)
		{
			$this->companyExecutor = null;
			$this->companyExecutorId = $id;
			
			return $this;
		}
		
		/**
		 * @return Project
		**/
		public function dropCompanyExecutor()
		{
			$this->companyExecutor = null;
			$this->companyExecutorId = null;
			
			return $this;
		}
		
		/**
		 * @return Company
		**/
		public function getCompanyClient()
		{
			if (!$this->companyClient && $this->companyClientId) {
				$this->companyClient = Company::dao()->getById($this->companyClientId);
			}
			
			return $this->companyClient;
		}
		
		public function getCompanyClientId()
		{
			return $this->companyClientId;
		}
		
		/**
		 * @return Project
		**/
		public function setCompanyClient(Company $companyClient)
		{
			$this->companyClient = $companyClient;
			$this->companyClientId = $companyClient->getId();
			
			return $this;
		}
		
		/**
		 * @return Project
		**/
		public function setCompanyClientId($id)
		{
			$this->companyClient = null;
			$this->companyClientId = $id;
			
			return $this;
		}
		
		/**
		 * @return Project
		**/
		public function dropCompanyClient()
		{
			$this->companyClient = null;
			$this->companyClientId = null;
			
			return $this;
		}
		
		/**
		 * @return ProjectRequirementsDAO
		**/
		public function getRequirements($lazy = false)
		{
			if (!$this->requirements || ($this->requirements->isLazy() != $lazy)) {
				$this->requirements = new ProjectRequirementsDAO($this, $lazy);
			}
			
			return $this->requirements;
		}
		
		/**
		 * @return Project
		**/
		public function fillRequirements($collection, $lazy = false)
		{
			$this->requirements = new ProjectRequirementsDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->requirements->mergeList($collection);
			
			return $this;
		}
	}
?>