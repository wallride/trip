<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2014-09-26 13:10:54                           *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoBaseTaskModel extends CreatedAndModified
	{
		protected $dateStart = null;
		protected $dateEnd = null;
		protected $members = null;
		protected $memberCreatedBy = null;
		protected $memberCreatedById = null;
		protected $memberExecutor = null;
		protected $memberExecutorId = null;
		protected $memberClient = null;
		protected $memberClientId = null;
		protected $costHour = 0;
		protected $costPublic = 0;
		protected $costReal = 0;
		protected $percentComplete = 0;
		
		public function __sleep()
		{
			return array_merge(
				parent::__sleep(),
				array('dateStart', 'dateEnd', 'memberCreatedById', 'memberExecutorId', 'memberClientId', 'costHour', 'costPublic', 'costReal', 'percentComplete')
			);
		}
		
		/**
		 * @return Timestamp
		**/
		public function getDateStart()
		{
			return $this->dateStart;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setDateStart(Timestamp $dateStart)
		{
			$this->dateStart = $dateStart;
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function dropDateStart()
		{
			$this->dateStart = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getDateEnd()
		{
			return $this->dateEnd;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setDateEnd(Timestamp $dateEnd)
		{
			$this->dateEnd = $dateEnd;
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function dropDateEnd()
		{
			$this->dateEnd = null;
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModelMembersDAO
		**/
		public function getMembers($lazy = false)
		{
			if (!$this->members || ($this->members->isLazy() != $lazy)) {
				$this->members = new BaseTaskModelMembersDAO($this, $lazy);
			}
			
			return $this->members;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function fillMembers($collection, $lazy = false)
		{
			$this->members = new BaseTaskModelMembersDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->members->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return CompanyMember
		**/
		public function getMemberCreatedBy()
		{
			if (!$this->memberCreatedBy && $this->memberCreatedById) {
				$this->memberCreatedBy = CompanyMember::dao()->getById($this->memberCreatedById);
			}
			
			return $this->memberCreatedBy;
		}
		
		public function getMemberCreatedById()
		{
			return $this->memberCreatedById;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setMemberCreatedBy(CompanyMember $memberCreatedBy)
		{
			$this->memberCreatedBy = $memberCreatedBy;
			$this->memberCreatedById = $memberCreatedBy->getId();
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setMemberCreatedById($id)
		{
			$this->memberCreatedBy = null;
			$this->memberCreatedById = $id;
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function dropMemberCreatedBy()
		{
			$this->memberCreatedBy = null;
			$this->memberCreatedById = null;
			
			return $this;
		}
		
		/**
		 * @return CompanyMember
		**/
		public function getMemberExecutor()
		{
			if (!$this->memberExecutor && $this->memberExecutorId) {
				$this->memberExecutor = CompanyMember::dao()->getById($this->memberExecutorId);
			}
			
			return $this->memberExecutor;
		}
		
		public function getMemberExecutorId()
		{
			return $this->memberExecutorId;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setMemberExecutor(CompanyMember $memberExecutor)
		{
			$this->memberExecutor = $memberExecutor;
			$this->memberExecutorId = $memberExecutor->getId();
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setMemberExecutorId($id)
		{
			$this->memberExecutor = null;
			$this->memberExecutorId = $id;
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function dropMemberExecutor()
		{
			$this->memberExecutor = null;
			$this->memberExecutorId = null;
			
			return $this;
		}
		
		/**
		 * @return CompanyMember
		**/
		public function getMemberClient()
		{
			if (!$this->memberClient && $this->memberClientId) {
				$this->memberClient = CompanyMember::dao()->getById($this->memberClientId);
			}
			
			return $this->memberClient;
		}
		
		public function getMemberClientId()
		{
			return $this->memberClientId;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setMemberClient(CompanyMember $memberClient)
		{
			$this->memberClient = $memberClient;
			$this->memberClientId = $memberClient->getId();
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setMemberClientId($id)
		{
			$this->memberClient = null;
			$this->memberClientId = $id;
			
			return $this;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function dropMemberClient()
		{
			$this->memberClient = null;
			$this->memberClientId = null;
			
			return $this;
		}
		
		public function getCostHour()
		{
			return $this->costHour;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setCostHour($costHour)
		{
			$this->costHour = $costHour;
			
			return $this;
		}
		
		public function getCostPublic()
		{
			return $this->costPublic;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setCostPublic($costPublic)
		{
			$this->costPublic = $costPublic;
			
			return $this;
		}
		
		public function getCostReal()
		{
			return $this->costReal;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setCostReal($costReal)
		{
			$this->costReal = $costReal;
			
			return $this;
		}
		
		public function getPercentComplete()
		{
			return $this->percentComplete;
		}
		
		/**
		 * @return BaseTaskModel
		**/
		public function setPercentComplete($percentComplete)
		{
			$this->percentComplete = $percentComplete;
			
			return $this;
		}
	}
?>